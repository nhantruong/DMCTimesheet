@{
    ViewBag.Title = "UserLogin";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    #region Datasource

    List<DMCTimesheet.Models.C01_Projects> _projectList = ViewBag.ProjectList as List<DMCTimesheet.Models.C01_Projects>;
    List<DMCTimesheet.Models.C01_Projects> projectList = _projectList.Where(s => s.ProjectID != "0000").ToList();
    List<DMCTimesheet.Models.C02_Members> memberList = ViewBag.Member as List<DMCTimesheet.Models.C02_Members>;
   // List<BIMWebApps.Models.C24_IssueList> clashList = ViewBag.Clashes as List<BIMWebApps.Models.C24_IssueList>;
    
    //List<BIMWebApps.Models.C48_VirtualProjects> VirtualList = ViewBag.Clashes as List<BIMWebApps.Models.C48_VirtualProjects>;

    #endregion

    #region Extract data for View - Chart
    var ProjectByYear = projectList.OrderByDescending(s => s.Year).GroupBy(s => s.Year);
    int count = 12 / ProjectByYear.Count();
    string classCol = "col-md-" + count;

    //new
    var labels = projectList.Where(s => s.DBorDBB != "Department").GroupBy(s => s.DBorDBB).ToList();//Loại dự án
                                                                                                    //Data for Chart
    int Ongoing = projectList.Where(s => s.ProjectState == "Ongoing").ToList().Count();
    int Pause = projectList.Where(s => s.ProjectState == "Pause").ToList().Count();
    int Finish = projectList.Where(s => s.ProjectState == "Finish").ToList().Count();

    int[] datatest = new int[labels.Count];//số lượng mỗi loại
    int i = 0;
    List<string> lbl = new List<string>();
    foreach (var itm in labels)
    {
        lbl.Add(itm.Key);
        datatest[i] = itm.AsQueryable().Count();
        i++;
    }
    Array _lbl = lbl.ToArray();
    System.Collections.ArrayList allProject = new System.Collections.ArrayList(projectList.ToList());
    List<string[]> lst = new List<string[]>();
    foreach (DMCTimesheet.Models.C01_Projects item in projectList)
    {
        string[] itm = new string[] { item.ProjectID, item.ProjectName };
        lst.Add(itm);
    }
    #endregion

}
<script src="~/UserStyles/production/vendors/Chart.js/dist/Chart.min.js"></script>

<div class="">
    @*Project per year  *@
    <div class="row">
        <div class="col-md-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Projects<small>per year</small></h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content row">
                    @foreach (var item in ProjectByYear)
                    {
                        <div class="animated ">
                            <div class="tile-stats row">
                                <div class="col-md-3"><h1 class="text-center text-primary">@item.ToList().Count()</h1></div>
                                <div class="col-md-7">
                                    <div><b class="text-danger">@item.ToList().Where(s => s.ProjectState == "Ongoing").Count()</b> ongoing</div>
                                    <div><b class="text-dark">@item.ToList().Where(s => s.ProjectState == "Pause").Count()</b> pause</div>
                                    <div><b class="text-success">@item.ToList().Where(s => s.ProjectState == "Finish").Count()</b> finish</div>
                                </div>
                                <p class="col-md-2 text-warning bg-dark">@item.Key</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    @* Chart & Top members *@
    <div class="row">
        <div class="col-md-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Projects Summary <small>Yearly progress</small></h2>
                    <div class="clearfix"></div>
                </div>
                @* Chart *@
                <div class="x_content">
                    <div class="col-md-9 col-sm-12 ">
                        <div class="col-md-6 col-sm-10">
                            <div class="x_title">
                                <h6>Status</h6>
                            </div>
                            <div class="x_content">
                                <canvas id="chartProjectStatus" style="height: 100%; width: 100%;"></canvas>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="x_title">
                                <h6> By project Type</h6>
                            </div>
                            <div class="x_content">
                                <canvas id="chartProjectType" style="height: 100%; width: 100%;"></canvas>
                            </div>
                        </div>
                        @*<div id="chartContainer" style="height: 100%; width: 100%;" class="bg-dark"></div>*@
                    </div>
                    @* Top Members *@
                    <div class="col-md-3 col-sm-12 ">
                        @{ //
                            var projectByMember = projectList.Where(s => s.ProjectState == "Ongoing" || s.ProjectState == "Pause").GroupBy(s => s.BIM_staff).OrderByDescending(p => p.Count()).Take(4);
                        }
                        <div>
                            <div class="x_title">
                                <h2>Top Members</h2>
                                <ul class="nav navbar-right panel_toolbox">
                                    <li>
                                        <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                                    </li>
                                    <li>
                                        <a class="close-link"><i class="fa fa-close"></i></a>
                                    </li>
                                </ul>
                                <div class="clearfix"></div>
                            </div>
                            @{
                                var allGoing = projectList.Where(s => s.ProjectState == "Ongoing").ToList();
                                var allPause = projectList.Where(s => s.ProjectState == "Pause").ToList();
                                foreach (var item in projectByMember)
                                {
                                    string ID = memberList.Where(s => s.Sortname == item.Key).FirstOrDefault().BIMstaffID.ToString();
                                    string img = memberList.Where(s => s.Sortname == item.Key).FirstOrDefault().Image;
                                    string imgPath = !string.IsNullOrEmpty(img) ? "~/Assets/Photos/MemberImage/" + img : "~/Assets/Photos/MemberImage/no-image.jpg";

                                    <ul class="list-unstyled top_profiles scroll-view">
                                        <li class="media event">
                                            <div class="media-heading">
                                                <img src="@Url.Content(imgPath)" class="img-circle aero" style="height:50px; width:50px" />
                                            </div>
                                            <div class="clearfix"></div>
                                            <div class="media-body">
                                                @Html.ActionLink(item.Key, "Details", "Member", new { id = ID }, new { @class = "title" })
                                                <p><strong class="text-danger">@item.ToList().Count() </strong> projects</p>
                                                <p>
                                                    <small><b class="text-primary">@allGoing.Where(s => s.BIM_staff == item.Key || s.BIM_MEP_staff == item.Key).Count()</b> ongoing & <b class="text-primary">@allPause.Where(s => s.BIM_staff == item.Key || s.BIM_MEP_staff == item.Key).Count()</b> pause</small>
                                                </p>
                                            </div>
                                        </li>
                                    </ul>
                                }
                            }
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    @*Resourcing*@
    <div class="row">
        <div class="col-md-12">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Resourcing</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>
                        <li>
                            <a class="close-link"><i class="fa fa-close"></i></a>
                        </li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <div class="row" style="border-bottom: 1px solid #E0E0E0; padding-bottom: 5px; margin-bottom: 5px;">
                        <div class="col-md-7">
                            <h2>Detail Projects <small>of Members</small></h2>
                            <table class="table table-bordered table-hover table-responsive-md">
                                <thead class="bg-dark text-white">
                                    <tr>
                                        <th></th>
                                        <th>Sum</th>
                                        <th>Project Name</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in projectList.Where(s => s.ProjectState != "Finish").OrderByDescending(s => s.Year).GroupBy(s => s.BIM_staff))
                                    {
                                        if (item.Key != "None")
                                        {
                                            <tr>
                                                <td class="text-center">
                                                    @{
                                                        //BIMWebApps.Models.C02_BIMstaff members = memberList.Where(s => s.Sortname == item.Key).FirstOrDefault();
                                                        //int ID = members.BIMstaffID;
                                                        int ID = memberList.Where(s => s.Sortname == item.Key).FirstOrDefault().BIMstaffID;
                                                        string img = ID > 0 ? memberList.Where(s => s.BIMstaffID == ID).FirstOrDefault().Image : "no-image.jpg";
                                                        string imgPath = !string.IsNullOrEmpty(img) ? "~/Assets/Photos/MemberImage/" + img : "~/Assets/Photos/MemberImage/no-image.jpg";
                                                        <img src="@Url.Content(imgPath)" class="img-circle aero" style="height:100px; width:100px" />
                                                        <p><b class="text-dark"> @Html.ActionLink(item.Key,"UserProfile","Member",new {id = ID },new {@class = "text-dark" })</b></p>
                                                    }
                                                </td>
                                                <td class="text-center text-md-center"><b class="text-danger">@item.ToList().Count()</b></td>
                                                <td>
                                                    <ul>
                                                        @foreach (var itm in item.ToList())
                                                        {
                                                            <li>@Html.ActionLink(itm.ProjectID + "-" + itm.ProjectName + " (" + itm.ProjectOtherName + ")", "UserDetails", "Projects", new { ID = itm.ProjectID }, new { @class = "text-primary" })</li>
                                                        }
                                                    </ul>
                                                </td>
                                                <td>
                                                    <ul>
                                                        @foreach (var itm in item.ToList())
                                                        {
                                                            if (itm.ProjectState != "Ongoing")
                                                            {
                                                                <li class="text-danger">@itm.ProjectState</li>
                                                            }
                                                            else
                                                            {
                                                                <li class="text-success">@itm.ProjectState</li>
                                                            }

                                                        }
                                                    </ul>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                        @* Chart Modelling *@
                        <div class="col-md-5">
                            <h2>Modeling</h2>
                            @{
                                //Tính toán số lượng và phần trăm công việc Model do In-house hoặc từ bên ngoài
                                int total = projectList.Count();
                                int inhouseArc = projectList.Where(s => s.Modeling_ARC_main == "BIM team" || s.Modeling_ARC_main == "BIM MEP").Count();
                                double percentArc = 100 * inhouseArc / total;
                                int inhouseStr = projectList.Where(s => s.Modeling_STR == "BIM team" || s.Modeling_STR == "BIM MEP").Count();
                                double percentStr = 100 * inhouseStr / total;
                                int inhouseMEP = projectList.Where(s => s.Modeling_MEP == "BIM team" || s.Modeling_MEP == "BIM MEP").Count();
                                double percentMEP = 100 * inhouseMEP / total;
                                int sumInhouse = inhouseArc + inhouseStr + inhouseMEP;
                                double sumInhouse_Percent = sumInhouse * 100 / total;

                                //int SubArc = projectList.Where(s => s.Modeling_ARC_main != "BIM team" || s.Modeling_ARC_main != "BIM MEP" || s.Modeling_ARC_main != "None").Count();
                                int SubArc = projectList.Select(s => s.Modeling_ARC_main).Count() - inhouseArc;
                                double percentSubArc = 100 * SubArc / total;
                                int SubStr = projectList.Select(s => s.Modeling_STR).Count() - inhouseStr;
                                double percentSubStr = 100 * SubStr / total;
                                int SubMEP = projectList.Select(s => s.Modeling_MEP).Count() - inhouseMEP;
                                double percentSubMEP = 100 * SubMEP / total;
                                int sumSub = SubArc + SubStr + SubMEP;
                                double sumSub_Percent = sumSub * 100 / total;

                                int sumARC = inhouseArc + SubArc;
                                int sumSTR = inhouseStr + SubStr;
                                int sumMEP = inhouseMEP + SubMEP;
                                List<int> Inhouse = new List<int>() { inhouseArc, inhouseStr, inhouseMEP };
                                List<int> SubDesigner = new List<int>() { SubArc, SubStr, SubMEP };
                                List<string> label = new List<string>() { "Architech", "Structure", "MEP" };
                            }

                            <div style="text-align: center;">
                                <table class="table table-bordered table-condensed">
                                    <thead class="bg-dark text-white">
                                        <tr>
                                            <th>Scope</th>
                                            <th>Architect</th>
                                            <th>Structure</th>
                                            <th>MEP</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td class="text-left"><b>In-house</b></td>
                                            <td><b>@inhouseArc</b><span class="text-danger"> (@percentArc%)</span></td>
                                            <td>@inhouseStr (@percentStr%)</td>
                                            <td>@inhouseMEP (@percentMEP%)</td>

                                        </tr>
                                        <tr>
                                            <td class="text-left"><b>Sub-Designer</b></td>
                                            <td>@SubArc (@percentSubArc)</td>
                                            <td>@SubStr (@percentSubStr)</td>
                                            <td>@SubMEP (@percentSubMEP)</td>
                                        </tr>
                                        <tr>
                                            <td class="text-left"><b>Sum</b></td>
                                            <td>@sumARC</td>
                                            <td>@sumSTR</td>
                                            <td>@sumMEP</td>
                                        </tr>
                                    </tbody>
                                </table>
                                <hr />
                                <div class="clearfix"></div>                               
                            </div>
                            <hr />
                            <div class="clearfix"></div>

                            <div class="col-md-12">
                                <div>
                                    <canvas id="chartResource"></canvas>
                                </div>
                            </div>                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@* Chart 1 code *@
<script>
   var ctx = document.getElementById('chartProjectStatus').getContext('2d');
   var myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                        labels:  ['Ongoing', 'Pause', 'Finish'],
                            datasets: [{
                            label: '',
                                data: [@Ongoing, @Pause, @Finish],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)'
                                ],
                                borderColor: [
                                    'rgba(255, 99, 132, 1)',
                                    'rgba(54, 162, 235, 1)',
                                    'rgba(255, 206, 86, 1)'
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: true,
                                        display: false
                                    }
                                }]
                            },
                            showToolTips: false,
                            legend: {display: false},
                            animation:
                            {
                                duration: 0,
                                onComplete: function () {
                                    // render the value of the chart above the bar
                                    var ctx = this.chart.ctx;
                                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
                                    ctx.fillStyle = this.chart.config.options.defaultFontColor;
                                    ctx.textAlign = 'center';
                                    ctx.textBaseline = 'bottom';
                                    this.data.datasets.forEach(function (dataset) {
                                        for (var i = 0; i < dataset.data.length; i++) {
                                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
                                            ctx.fillText(dataset.data[i], model.x, model.y - 5);
                                        }
                                    });
                                }
                            }
                        }
                    });
</script>
@* Chart 2 code *@
<script>
    var lablesVlue = @Html.Raw(Json.Encode(_lbl));
    var datavalue = @Html.Raw(Json.Encode(datatest));

    var ctx = document.getElementById('chartProjectType').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: lablesVlue,
            datasets: [{
                label: '',
                data: datavalue,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            showToolTips: true,
            legend: { display: false },
            animation:
            {
                duration: 0,
                onComplete: function () {
                    var ctx = this.chart.ctx;
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
                    ctx.fillStyle = this.chart.config.options.defaultFontColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    this.data.datasets.forEach(function (dataset) {
                        for (var i = 0; i < dataset.data.length; i++) {
                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
                            ctx.fillText(dataset.data[i], model.x, model.y - 5);
                        }
                    });
                }
            }
        }
    });
</script>

@*BIểu đồ Resource theo bộ môn*@
<script>
    var lablesVlue = @Html.Raw(Json.Encode(label));
    var inHouseDatavalue = @Html.Raw(Json.Encode(Inhouse));
    var sumInhouse = sumValue(inHouseDatavalue);
    var subDatavalue = @Html.Raw(Json.Encode(SubDesigner));
    var sumSub = sumValue(subDatavalue);
    //alert("Inhouse: " + sumInhouse + " Sub:" + sumSub);

    var ctx = document.getElementById('chartResource').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: lablesVlue,
            datasets: [{
                label: 'In-house',
                data: inHouseDatavalue,
                backgroundColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }, {
                    label: 'Sub-Designer',
                    data: subDatavalue,
                    backgroundColor: [
                        'rgba(64, 102, 255, 1)',
                        'rgba(64, 102, 255, 1)',
                        'rgba(64, 102, 255, 1)'
                    ],
                    borderColor: [
                        'rgba(64, 102, 255, 1)',
                        'rgba(64, 102, 255, 1)',
                        'rgba(64, 102, 255, 1)'
                    ],
                    borderWidth: 1
                }]
        },
        options: {
            title: {
                display: true,
                text: 'Scope of Models Create'
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true                    }
                }]
            },
            showToolTips: false,
            legend: { display: true },
            animation:
            {
                duration: 0,
                onComplete: function () {
                    var ctx = this.chart.ctx;
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
                    ctx.fillStyle = this.chart.config.options.defaultFontColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    this.data.datasets.forEach(function (dataset) {
                        for (var i = 0; i < dataset.data.length; i++) {
                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
                            ctx.fillText(dataset.data[i], model.x, model.y - 5);
                        }
                    });
                }
            }
        }
    });

    function sumValue(data) {
        var kq = 0;
        for (var i = 0; i < data; i++) {
            kq += data[i].value;
        }
        return kq;
    }
</script>
@*Biểu đồ Count All Resource*@
<script>
    var ctx = document.getElementById('chartResourceAll').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['In-house','Sub-Designer'],
            datasets: [{
                label: '',
                data: [@sumInhouse,@sumSub],
                backgroundColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(64, 102, 255, 1)'
                ],
                borderColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(64, 102, 255, 1)'
                ],
                borderWidth: 1
            }],
        options: {
            title: {
                display: true,
                text: 'Scope of Models Create'
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            showToolTips: false,
            legend: { display: false },
            animation:
            {
                duration: 0,
                onComplete: function () {
                    var ctx = this.chart.ctx;
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
                    ctx.fillStyle = this.chart.config.options.defaultFontColor;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    this.data.datasets.forEach(function (dataset) {
                        for (var i = 0; i < dataset.data.length; i++) {
                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
                            ctx.fillText(dataset.data[i], model.x, model.y - 5);
                        }
                    });
                }
            }
        }
</script>